// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, name, url, description, user_id)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ? 
)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at, description, etag, last_modified
`

type CreateFeedParams struct {
	ID          string
	Name        string
	Url         string
	Description sql.NullString
	UserID      string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.Description,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
		&i.Description,
		&i.Etag,
		&i.LastModified,
	)
	return i, err
}

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
VALUES (?, ?, ?, ?, ?)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type CreateFeedFollowParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    string
	FeedID    string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds WHERE id = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, id)
	return err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows WHERE feed_follows.user_id = ? AND feed_follows.feed_id = (SELECT id FROM feeds WHERE url = ?)
`

type DeleteFeedFollowParams struct {
	UserID string
	Url    string
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.Url)
	return err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at, description, etag, last_modified FROM feeds WHERE url = ?
`

func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
		&i.Description,
		&i.Etag,
		&i.LastModified,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_follows.feed_id, f.name as feed_name, u.name as user_name
FROM feed_follows
JOIN feeds f ON feed_follows.feed_id = f.id
JOIN users u ON feed_follows.user_id = u.id
WHERE feed_follows.user_id = ?
`

type GetFeedFollowsForUserRow struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    string
	FeedID    string
	FeedName  string
	UserName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeeds = `-- name: GetFeeds :many
SELECT f.id, f.name, f.url, f.description, u.name as user_name 
FROM feeds f
JOIN users u ON f.user_id = u.id
ORDER BY f.created_at DESC
`

type GetFeedsRow struct {
	ID          string
	Name        string
	Url         string
	Description sql.NullString
	UserName    string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Description,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsToFetch = `-- name: GetFeedsToFetch :many
SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at, description, etag, last_modified FROM feeds
WHERE last_fetched_at IS NULL
   OR last_fetched_at < ?
ORDER BY (last_fetched_at IS NOT NULL), last_fetched_at ASC
`

func (q *Queries) GetFeedsToFetch(ctx context.Context, lastFetchedAt sql.NullTime) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsToFetch, lastFetchedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.LastFetchedAt,
			&i.Description,
			&i.Etag,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at, description, etag, last_modified FROM feeds
ORDER BY (last_fetched_at IS NOT NULL), last_fetched_at ASC
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
		&i.Description,
		&i.Etag,
		&i.LastModified,
	)
	return i, err
}

const markFeedAsFetched = `-- name: MarkFeedAsFetched :exec
UPDATE feeds SET last_fetched_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) MarkFeedAsFetched(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, markFeedAsFetched, id)
	return err
}

const updateFeedConditionalHeaders = `-- name: UpdateFeedConditionalHeaders :exec
UPDATE feeds 
SET etag = ?, last_modified = ?, last_fetched_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateFeedConditionalHeadersParams struct {
	Etag         sql.NullString
	LastModified sql.NullString
	ID           string
}

func (q *Queries) UpdateFeedConditionalHeaders(ctx context.Context, arg UpdateFeedConditionalHeadersParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedConditionalHeaders, arg.Etag, arg.LastModified, arg.ID)
	return err
}

const updateFeedConditionalHeadersNoFetch = `-- name: UpdateFeedConditionalHeadersNoFetch :exec
UPDATE feeds 
SET etag = ?, last_modified = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateFeedConditionalHeadersNoFetchParams struct {
	Etag         sql.NullString
	LastModified sql.NullString
	ID           string
}

func (q *Queries) UpdateFeedConditionalHeadersNoFetch(ctx context.Context, arg UpdateFeedConditionalHeadersNoFetchParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedConditionalHeadersNoFetch, arg.Etag, arg.LastModified, arg.ID)
	return err
}
